!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Atom	typ/atom.ts	/^export type Atom<A extends AtomName> = AtomHardProperties & AtomShape<A>;$/;"	t
Atom	typ/book.ts	/^				export interface Atom {$/;"	i
Atom	typ/book.ts	/^			export interface Atom extends SharedFields {$/;"	i
AtomDefinitionPropertyInferSubType	typ/atom.ts	/^type AtomDefinitionPropertyInferSubType<P> = P extends {type: BookPropertyType.ATOM, atom: infer I} ? I : never;$/;"	t
AtomDefinitionPropertyInferType	typ/atom.ts	/^type AtomDefinitionPropertyInferType<P> = P extends {type: infer I} ? I : never;$/;"	t
AtomHardProperties	typ/atom.ts	/^type AtomHardProperties = {$/;"	t
AtomName	typ/atom.ts	/^export type AtomName = keyof typeof atom_book;$/;"	t
AtomShape	typ/atom.ts	/^export type AtomShape<A extends AtomName> =$/;"	t
AtomTypeOfCommonProperty	typ/atom.ts	/^type AtomTypeOfCommonProperty<k extends KeyOfCommonProperties> =$/;"	t
AtomTypeOfHardProperty	typ/atom.ts	/^type AtomTypeOfHardProperty<k extends KeyOfHardProperties> =$/;"	t
AtomTypeOfProperty	typ/atom.ts	/^type AtomTypeOfProperty<A extends AtomName, k extends CustomKeyOfAtomShape<A>> =$/;"	t
BLL	bll/bll.ts	/^class BLL<A extends AtomName> {$/;"	c
Base	typ/query.ts	/^	type Base = string | number | boolean | Date;$/;"	t
Binary	typ/book.ts	/^			export interface Binary extends SharedFields {$/;"	i
Book	typ/book.ts	/^export type Book = {$/;"	t
Comparsion	typ/query.ts	/^	type Comparsion =$/;"	t
Configuration	typ/conf.ts	/^export type Configuration = {$/;"	t
ConnectionInstance	rel/mongo/connection.ts	/^export type ConnectionInstance = InstanceType<typeof MongooseDBConnection>;$/;"	t
CustomKeyOfAtomShape	typ/atom.ts	/^type CustomKeyOfAtomShape<A extends AtomName> =$/;"	t
DAL	dal/dal.ts	/^export class DAL<A extends AtomName> {$/;"	c
DatabaseType	typ/conf.ts	/^export type DatabaseType = 'mongo'; \/\/ | 'mysql'$/;"	t
Definition	typ/book.ts	/^	export type Definition = {$/;"	t
Depth	typ/atom.ts	/^export type Depth = undefined | 0 | 1 | 2 | 3;$/;"	t
Email	typ/book.ts	/^			export interface Email extends SharedFields {$/;"	i
Encrypted	typ/book.ts	/^			export interface Encrypted extends SharedFields {$/;"	i
Enum	typ/book.ts	/^			export type Enum =$/;"	t
EnumNumber	typ/book.ts	/^			export interface EnumNumber extends SharedFields {$/;"	i
EnumString	typ/book.ts	/^			export interface EnumString extends SharedFields {$/;"	i
Equal	typ/query.ts	/^	type Equal<A extends AtomName> = {$/;"	t
ExcludeOptional	typ/atom.ts	/^type ExcludeOptional<P> = OmitSubType<P, {optional: true}>;$/;"	t
ExcludeSubAtom	typ/atom.ts	/^type ExcludeSubAtom<P> = OmitSubType<P, {type: BookPropertyType.ATOM}>;$/;"	t
ExcludeSubAtomArray	typ/atom.ts	/^type ExcludeSubAtomArray<P> = OmitSubType<P, {type: BookPropertyType.ATOM_ARRAY}>;$/;"	t
Expression	typ/query.ts	/^	export type Expression<A extends AtomName> = Equal<A> | WithComparsion<A>;$/;"	t
ExtractOptional	typ/atom.ts	/^type ExtractOptional<P> = PickSubType<P, {optional: true}>;$/;"	t
ExtractSubAtom	typ/atom.ts	/^type ExtractSubAtom<P> = PickSubType<P, {type: BookPropertyType.ATOM}>;$/;"	t
ExtractSubAtomArray	typ/atom.ts	/^type ExtractSubAtomArray<P> = PickSubType<P, {type: BookPropertyType.ATOM_ARRAY}>;$/;"	t
Float	typ/book.ts	/^				export interface Float {$/;"	i
Float	typ/book.ts	/^			export interface Float extends SharedFields {$/;"	i
ID	typ/book.ts	/^			export interface ID extends SharedFields {$/;"	i
Integer	typ/book.ts	/^			export interface Integer extends SharedFields {$/;"	i
KeyOfCommonProperties	typ/atom.ts	/^type KeyOfCommonProperties = keyof typeof atom_common_properties;$/;"	t
KeyOfHardProperties	typ/atom.ts	/^type KeyOfHardProperties = keyof typeof atom_hard_properties;$/;"	t
Logical	typ/query.ts	/^	export type Logical<A extends AtomName> =$/;"	t
LongText	typ/book.ts	/^			export interface LongText extends SharedFields {$/;"	i
Molecule	typ/atom.ts	/^export type Molecule<A extends AtomName, D extends Depth = 0> =$/;"	t
MoleculePrimitive	typ/atom.ts	/^type MoleculePrimitive<A extends AtomName> =$/;"	t
MoleculeShape	typ/atom.ts	/^export type MoleculeShape<A extends AtomName> =$/;"	t
MongooseDBConnection	rel/mongo/connection.ts	/^class MongooseDBConnection {$/;"	c
MongooseRelation	rel/mongo/relation.ts	/^export class MongooseRelation<A extends AtomName> implements Relation<A> {$/;"	c
MongooseTrashRelation	rel/mongo/trash.ts	/^export class MongooseTrashRelation<A extends AtomName> extends MongooseRelation<A>$/;"	c
Number	typ/book.ts	/^				export interface Number {$/;"	i
Number	typ/book.ts	/^			export type Number =$/;"	t
OmitSubType	typ/atom.ts	/^type OmitSubType<Base, Condition> = Omit<Base, {$/;"	t
OptionalKeyOfAtomCommonProperties	typ/atom.ts	/^type OptionalKeyOfAtomCommonProperties =$/;"	t
OptionalKeyOfAtomPrimitiveProperties	typ/atom.ts	/^type OptionalKeyOfAtomPrimitiveProperties<A extends AtomName> =$/;"	t
OptionalKeyOfAtomProperties	typ/atom.ts	/^type OptionalKeyOfAtomProperties<A extends AtomName> =$/;"	t
OptionalKeyOfSubAtomProperties	typ/atom.ts	/^type OptionalKeyOfSubAtomProperties<A extends AtomName> =$/;"	t
OptionalPrimitive	typ/atom.ts	/^type OptionalPrimitive<P> = PickSubType<ExcludeSubAtom<P>, {optional: true}>;$/;"	t
OptionalSubAtom	typ/atom.ts	/^type OptionalSubAtom<P> = PickSubType<ExtractSubAtom<P>, {optional: true}>;$/;"	t
OptionalSubAtomArray	typ/atom.ts	/^type OptionalSubAtomArray<P> = PickSubType<ExtractSubAtomArray<P>, {optional: true}>;$/;"	t
Options	typ/query.ts	/^	export type Options<A extends AtomName, D extends Depth = 0> = {$/;"	t
PickSubType	typ/atom.ts	/^type PickSubType<Base, Condition> = Pick<Base, {$/;"	t
Properties	typ/book.ts	/^		export type Properties = {$/;"	t
PropertiesOfAtomDefinition	typ/atom.ts	/^type PropertiesOfAtomDefinition<A extends AtomName> = typeof atom_book[A]['properties'];$/;"	t
Property	typ/book.ts	/^		export type Property =$/;"	t
Query	typ/query.ts	/^export type Query<A extends AtomName> = Query.Expression<A> | Query.Logical<A>;$/;"	t
RealSubAtomShapeType	typ/atom.ts	/^type RealSubAtomShapeType<A extends AtomName, k extends SubAtomKeyOfAtom<A>> =$/;"	t
RealSubAtomType	typ/atom.ts	/^type RealSubAtomType<A extends AtomName, k extends SubAtomKeyOfAtom<A>, D extends Depth> =$/;"	t
RealType	typ/book.ts	/^export type RealType<AT extends BookPropertyType> =$/;"	t
RealTypeOfAtomCommonProperty	typ/atom.ts	/^type RealTypeOfAtomCommonProperty<k extends KeyOfCommonProperties> =$/;"	t
RealTypeOfAtomHardProperty	typ/atom.ts	/^type RealTypeOfAtomHardProperty<k extends KeyOfHardProperties> =$/;"	t
RealTypeOfAtomProperty	typ/atom.ts	/^type RealTypeOfAtomProperty<A extends AtomName, k extends CustomKeyOfAtomShape<A>> =$/;"	t
Relation	rel/types.ts	/^export interface Relation<A extends AtomName> {$/;"	i
RequiredKeyOfAtomCommonProperties	typ/atom.ts	/^type RequiredKeyOfAtomCommonProperties =$/;"	t
RequiredKeyOfAtomPrimitiveProperties	typ/atom.ts	/^type RequiredKeyOfAtomPrimitiveProperties<A extends AtomName> =$/;"	t
RequiredKeyOfAtomProperties	typ/atom.ts	/^type RequiredKeyOfAtomProperties<A extends AtomName> =$/;"	t
RequiredKeyOfSubAtomProperties	typ/atom.ts	/^type RequiredKeyOfSubAtomProperties<A extends AtomName> =$/;"	t
RequiredPrimitive	typ/atom.ts	/^type RequiredPrimitive<P> = OmitSubType<ExcludeSubAtom<P>, {optional: true}>;$/;"	t
RequiredSubAtom	typ/atom.ts	/^type RequiredSubAtom<P> = OmitSubType<ExtractSubAtom<P>, {optional: true}>;$/;"	t
RequiredSubAtomArray	typ/atom.ts	/^type RequiredSubAtomArray<P> = OmitSubType<ExtractSubAtomArray<P>, {optional: true}>;$/;"	t
Set	typ/book.ts	/^			export type Set =$/;"	t
SetNumber	typ/book.ts	/^				export interface SetNumber {$/;"	i
SetNumber	typ/book.ts	/^			export interface SetNumber extends SharedFields {$/;"	i
SetString	typ/book.ts	/^				export interface SetString {$/;"	i
SetString	typ/book.ts	/^			export interface SetString extends SharedFields {$/;"	i
SharedFields	typ/book.ts	/^			interface SharedFields {$/;"	i
String	typ/book.ts	/^				export interface String {$/;"	i
String	typ/book.ts	/^			export type String =$/;"	t
SubAtomKeyOfAtom	typ/atom.ts	/^type SubAtomKeyOfAtom<A extends AtomName> =$/;"	t
Text	typ/book.ts	/^			export interface Text extends SharedFields {$/;"	i
Time	typ/book.ts	/^				export interface Time {$/;"	i
Time	typ/book.ts	/^			export interface Time extends SharedFields {$/;"	i
WithComparsion	typ/query.ts	/^	type WithComparsion<A extends AtomName> = {$/;"	t
_allow_duplicate	rel/mongo/trash.ts	/^function _allow_duplicate(schema_definition:mongoose.SchemaDefinition)$/;"	f
_alter_by_id	dal/dal.ts	/^	private async _alter_by_id(id:string, partial_atom:Partial<AtomShape<A>>, in_trash = false, fix = true)$/;"	m
_check_prop_main_type	atm/validate.ts	/^function _check_prop_main_type(prop_def: Book.Definition.Property, prop_key: string, prop_value: any)$/;"	f
_clean_element	rel/mongo/relation.ts	/^function _clean_element<A extends AtomName, D extends Depth>(atom:Molecule<A,D>)$/;"	f
_clean_object	rel/mongo/relation.ts	/^function _clean_object<A extends AtomName>(atom:Atom<A>)$/;"	f
_complie_mongoose_model	rel/mongo/relation.ts	/^	protected _complie_mongoose_model():mongoose.Model<mongoose.Document>{$/;"	m
_complie_mongoose_model	rel/mongo/trash.ts	/^	protected _complie_mongoose_model():mongoose.Model<mongoose.Document>{$/;"	m
_conn	rel/mongo/relation.ts	/^	protected _conn:mongo_connection.ConnectionInstance;$/;"	m
_connection	rel/mongo/connection.ts	/^	private _connection:mongoose.Connection;$/;"	m
_custom_validation	atm/validate.ts	/^function _custom_validation<A extends AtomName>(atom_name:A, partial_atom:Partial<AtomShape<A>>)$/;"	f
_dal	bll/bll.ts	/^	protected _dal:urn_dal.DAL<A>;$/;"	m
_db_relation	dal/dal.ts	/^	protected _db_relation:urn_rel.Relation<A>;$/;"	m
_db_trash_relation	dal/dal.ts	/^	protected _db_trash_relation:urn_rel.Relation<A> | null;$/;"	m
_delete_by_id	dal/dal.ts	/^	private async _delete_by_id(id:string, in_trash = false)$/;"	m
_encrypt_partial_atom_changed_properties	dal/dal.ts	/^	private async _encrypt_partial_atom_changed_properties(id:string, partial_atom:Partial<AtomShape<A>>)$/;"	m
_fix_on_validation_error	dal/dal.ts	/^	private async _fix_on_validation_error<D extends Depth>(atom:Molecule<A,D>)$/;"	m
_generate_date_schema_def	rel/mongo/schema.ts	/^function _generate_date_schema_def($/;"	f
_generate_enum_schema_def	rel/mongo/schema.ts	/^function _generate_enum_schema_def($/;"	f
_generate_mongoose_schema_prop	rel/mongo/schema.ts	/^function _generate_mongoose_schema_prop(prop_def:Book.Definition.Property, prop_key:string)$/;"	f
_generate_number_schema_def	rel/mongo/schema.ts	/^function _generate_number_schema_def($/;"	f
_generate_string_schema_def	rel/mongo/schema.ts	/^function _generate_string_schema_def($/;"	f
_get_connection	rel/mongo/relation.ts	/^	protected _get_connection():mongo_connection.ConnectionInstance{$/;"	m
_get_connection	rel/mongo/trash.ts	/^	protected _get_connection():mongo_connection.ConnectionInstance{$/;"	m
_has_all_properties	atm/validate.ts	/^function _has_all_properties<A extends AtomName>(atom_name:A, atom_shape:AtomShape<A>)$/;"	f
_has_no_other_properties	atm/validate.ts	/^function _has_no_other_properties<A extends AtomName>(atom_name:A, partial_atom:Partial<AtomShape<A>>)$/;"	f
_insert_one	dal/dal.ts	/^	private async _insert_one(molecule_shape:MoleculeShape<A>, in_trash = false)$/;"	m
_is_base_query_type	vali/query.ts	/^function _is_base_query_type(val:any)$/;"	f
_is_optional_property	atm/validate.ts	/^function _is_optional_property(prop:Book.Definition.Property)$/;"	f
_mongo_schema_def	rel/mongo/relation.ts	/^	protected _mongo_schema_def:mongoose.SchemaDefinition;$/;"	m
_on_close	rel/mongo/connection.ts	/^	private _on_close()$/;"	m
_on_connected	rel/mongo/connection.ts	/^	private _on_connected()$/;"	m
_on_connecting	rel/mongo/connection.ts	/^	private _on_connecting()$/;"	m
_on_disconnected	rel/mongo/connection.ts	/^	private _on_disconnected()$/;"	m
_on_disconnecting	rel/mongo/connection.ts	/^	private _on_disconnecting()$/;"	m
_on_error	rel/mongo/connection.ts	/^	private _on_error(e:Error)$/;"	m
_on_reconnect_failed	rel/mongo/connection.ts	/^	private _on_reconnect_failed()$/;"	m
_on_reconnect_tries	rel/mongo/connection.ts	/^	private _on_reconnect_tries()$/;"	m
_on_reconnected	rel/mongo/connection.ts	/^	private _on_reconnected()$/;"	m
_properties_have_correct_type	atm/validate.ts	/^function _properties_have_correct_type<A extends AtomName>(atom_name:A, partial_atom:Partial<AtomShape<A>>)$/;"	f
_raw	rel/mongo/relation.ts	/^	protected _raw:mongoose.Model<mongoose.Document>;$/;"	m
_select	dal/dal.ts	/^	private async _select<D extends Depth>(query:Query<A>, options?:Query.Options<A,D>, in_trash = false)$/;"	m
_select_by_id	dal/dal.ts	/^	private async _select_by_id<D extends Depth>(id:string, depth?:D, in_trash = false)$/;"	m
_select_one	dal/dal.ts	/^	private async _select_one<D extends Depth>(query:Query<A>, options?:Query.Options<A,D>, in_trash = false)$/;"	m
_validate_atom_number	atm/validate.ts	/^function _validate_atom_number($/;"	f
_validate_atom_set_number	atm/validate.ts	/^function _validate_atom_set_number($/;"	f
_validate_atom_set_string	atm/validate.ts	/^function _validate_atom_set_string($/;"	f
_validate_atom_string	atm/validate.ts	/^function _validate_atom_string($/;"	f
_validate_atom_time	atm/validate.ts	/^function _validate_atom_time($/;"	f
_validate_encrypt_property	atm/validate.ts	/^export function _validate_encrypt_property($/;"	f
_validate_expression	vali/query.ts	/^function _validate_expression<A extends AtomName>(field:Query.Expression<A>)$/;"	f
a	typ/atom.ts	/^export const a:Molecule<'product'> = {$/;"	v
alter_by_id	dal/dal.ts	/^	public async alter_by_id(id:string, partial_atom:Partial<AtomShape<A>>)$/;"	m
alter_by_id	rel/mongo/relation.ts	/^	public async alter_by_id(id:string, partial_atom:Partial<AtomShape<A>>)$/;"	m
alter_one	dal/dal.ts	/^	public async alter_one(atom:Atom<A>)$/;"	m
atom_book	book.ts	/^export const atom_book = {$/;"	v
atom_common_properties	typ/atom.ts	/^export const atom_common_properties = {$/;"	v
atom_hard_properties	typ/atom.ts	/^export const atom_hard_properties = {$/;"	v
b	typ/atom.ts	/^export const b:Molecule<'product',1> = {$/;"	v
bcrypt	atm/encrypt.ts	/^import bcrypt from 'bcrypt';$/;"	I
c	typ/atom.ts	/^export const c:Molecule<'product',2> = {$/;"	v
close	rel/mongo/connection.ts	/^	public async close()$/;"	m
core_config	config/defaults.ts	/^export const core_config:Configuration = {$/;"	v
create	bll/bll.ts	/^export function create<A extends AtomName>(atom_name:A):BLL<A>{$/;"	f
create	dal/dal.ts	/^export function create<A extends AtomName>(atom_name:A):DAL<A>{$/;"	f
create	rel/mongo/connection.ts	/^export function create(con_name:string, db_host:string, db_port:number, db_name:string)$/;"	f
create	rel/mongo/relation.ts	/^export function create<A extends AtomName>(atom_name: A)$/;"	f
delete_by_id	dal/dal.ts	/^	public async delete_by_id(id:string)$/;"	m
delete_by_id	rel/mongo/relation.ts	/^	public async delete_by_id(id:string)$/;"	m
delete_one	dal/dal.ts	/^	public async delete_one(atom:Atom<A>)$/;"	m
encrypt_properties	atm/encrypt.ts	/^export async function encrypt_properties<A extends AtomName>(atom_name:A, atom:AtomShape<A>):Promise<AtomShape<A>>$/;"	f
encrypt_properties	atm/encrypt.ts	/^export async function encrypt_properties<A extends AtomName>(atom_name:A, atom:Partial<AtomShape<A>>)$/;"	f
encrypt_property	atm/encrypt.ts	/^export async function encrypt_property<A extends AtomName>$/;"	f
enum	typ/book.ts	/^export const enum BookPropertyType {$/;"	v
find	bll/bll.ts	/^	public async find<D extends Depth>(query:Query<A>, options?:Query.Options<A,D>)$/;"	m
find_by_id	bll/bll.ts	/^	public async find_by_id<D extends Depth>(id:string, depth?:D)$/;"	m
find_one	bll/bll.ts	/^	public async find_one<D extends Depth>(query:Query<A>, options?:Query.Options<A,D>)$/;"	m
fix_atom_key	atm/validate.ts	/^export function fix_atom_key<A extends AtomName>($/;"	f
generate_mongo_schema_def	rel/mongo/schema.ts	/^export function generate_mongo_schema_def<A extends AtomName>(atom_name:A)$/;"	f
get_encrypted_keys	atm/keys.ts	/^export function get_encrypted_keys<A extends AtomName>(atom_name:A)$/;"	f
get_model	rel/mongo/connection.ts	/^	public get_model(relation_name:AtomName, schema:mongoose.Schema)$/;"	m
get_subatom_keys	atm/keys.ts	/^export function get_subatom_keys<A extends AtomName>(atom_name:A)$/;"	f
get_unique_keys	atm/keys.ts	/^export function get_unique_keys<A extends AtomName>(atom_name:A)$/;"	f
init	main.ts	/^export function init(config:Configuration)$/;"	f
insert_new	bll/bll.ts	/^	public async insert_new(molecule_shape:MoleculeShape<A>)$/;"	m
insert_one	dal/dal.ts	/^	public async insert_one(molecule_shape:MoleculeShape<A>)$/;"	m
insert_one	rel/mongo/relation.ts	/^	public async insert_one(molecule_shape:MoleculeShape<A>)$/;"	m
is_valid_id	rel/mongo/connection.ts	/^	public is_valid_id(id:string)$/;"	m
is_valid_id	rel/mongo/relation.ts	/^	public is_valid_id(id:string)$/;"	m
is_valid_key	atm/validate.ts	/^export function is_valid_key<A extends AtomName>(atom_name:A, key:string)$/;"	f
mongoose	rel/mongo/connection.ts	/^import mongoose from 'mongoose';$/;"	I
mongoose	rel/mongo/relation.ts	/^import mongoose from 'mongoose';$/;"	I
mongoose	rel/mongo/schema.ts	/^import mongoose from 'mongoose';$/;"	I
mongoose	rel/mongo/trash.ts	/^import mongoose from 'mongoose';$/;"	I
name	rel/mongo/connection.ts	/^	public name:string;$/;"	m
readyState	rel/mongo/connection.ts	/^	public readyState:number;$/;"	m
remove_by_id	bll/bll.ts	/^	public async remove_by_id(id:string)$/;"	m
remove_one	bll/bll.ts	/^	public async remove_one(molecule:Molecule<A>)$/;"	m
replace_by_id	rel/mongo/relation.ts	/^	public async replace_by_id(id:string, atom:AtomShape<A>)$/;"	m
select	dal/dal.ts	/^	public async select<D extends Depth>(query:Query<A>, options?:Query.Options<A, D>)$/;"	m
select	rel/mongo/relation.ts	/^	public async select<D extends Depth>(query:Query<A>, options?:Query.Options<A,D>)$/;"	m
select_by_id	dal/dal.ts	/^	public async select_by_id<D extends Depth>(id:string, depth?:D)$/;"	m
select_by_id	rel/mongo/relation.ts	/^	public async select_by_id<D extends Depth>(id:string, depth?:D)$/;"	m
select_one	dal/dal.ts	/^	public async select_one<D extends Depth>(query:Query<A>, options?:Query.Options<A,D>)$/;"	m
select_one	rel/mongo/relation.ts	/^	public async select_one<D extends Depth>(query:Query<A>, options?:Query.Options<A,D>)$/;"	m
trash_create	rel/mongo/trash.ts	/^export function trash_create<A extends AtomName>(atom_name: A)$/;"	f
update_by_id	bll/bll.ts	/^	public async update_by_id(id:string, partial_atom:Partial<AtomShape<A>>)$/;"	m
update_one	bll/bll.ts	/^	public async update_one(atom:Atom<A>)$/;"	m
uri	rel/mongo/connection.ts	/^	public uri:string;$/;"	m
validate	atm/validate.ts	/^export function validate<A extends AtomName, D extends Depth>(atom_name:A, atom:Molecule<A,D>)$/;"	f
validate_filter	vali/query.ts	/^function validate_filter<A extends AtomName>(query:Query<A>, atom_name:A)$/;"	f
validate_filter_options_params	vali/query.ts	/^export function validate_filter_options_params<A extends AtomName>$/;"	f
validate_options	vali/query.ts	/^function validate_options<A extends AtomName>(options:Query.Options<A>, atom_name:A)$/;"	f
validate_partial	atm/validate.ts	/^export function validate_partial<A extends AtomName>(atom_name:A, partial_atom:Partial<AtomShape<A>>)$/;"	f
validate_shape	atm/validate.ts	/^export function validate_shape<A extends AtomName>(atom_name:A, atom_shape:AtomShape<A>)$/;"	f
